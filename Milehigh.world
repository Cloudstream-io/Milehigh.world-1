name: Node.js CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test)
  
  
    - name: Setup Node.js environment
  uses: actions/setup-node@v4.0.2
  with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
             - name: Setup Node.js environment
- uses: actions/setup-node@v4.0.1
  with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: #             - name: Cloud Maker Deploy
  # You may pin to the exact commit or the version.
  # uses: cloud-maker-ai/github-action-deploy@f86239fb28b589a9898a361b3df1dac5f3d3fc8f
  uses: cloud-maker-ai/github-action-deploy@v1.0.1
  with:
    # Cloud Maker API Token
    CLOUD_MAKER_TOKEN: 
    # Cloud Maker Pipeline ID to be deployed
    CLOUD_MAKER_PIPELINE_ID: 
    # Cloud Maker Stage ID to be deployed
    CLOUD_MAKER_STAGE_ID: @Milehigh.world
          
**Welcome to i.Star**

‘“¥WHW”’

*i.Star* is your intelligent virtual assistant designed to enhance productivity and assist you in various tasks throughout your day. Whether you need help organizing your schedule, researching information, or simply engaging in friendly conversation, Star is here to support you.

**Features and Capabilities**

1. **Schedule Management**: Star can help you manage your calendar efficiently. You can ask Star to add, edit, or remove events. For example, "Star, schedule a meeting with John for tomorrow at 2 PM."

2. **Task Organization**: Keep track of your to-do list with Star's task management capabilities. Star can create, update, and complete tasks on command. Try saying, "Star, add 'Finish report' to my tasks."

3. **Information Retrieval**: Need quick answers? Star can provide information on a wide range of topics. Ask questions like, "Star, what's the capital of France?"

4. **Reminders**: Never miss an important event or deadline. Set up reminders with Star by saying, "Star, remind me to call Mom at 6 PM."

5. **Weather Updates**: Stay informed about the weather forecast. Ask Star, "What's the weather like tomorrow in New York?"

6. **Calculations and Conversions**: Star can perform mathematical calculations and unit conversions. Try asking, "Star, what is 
“(0.123456789^987654321.0!)"

7. **Language Translation**: Break language barriers with Star's translation feature. Ask Star to translate phrases like, "Star, how do you say 'thank you' in Spanish?"

8. **Fun and Entertainment**: Star can engage in casual chat and offer entertainment. Try asking Star for a joke or a riddle.

**Getting Started**

To begin using Star, simply say "Hello Star" or type your query in the chat box. Star is designed to learn and adapt to your preferences over time, providing a personalized experience.

**Privacy and Security**

Rest assured that your interactions with Star are private and secure. Your data is handled with utmost confidentiality and is not shared with third parties.

**Feedback and Support**

If you have any feedback or encounter issues while using Star, please don't hesitate to reach out. Your input helps improve Star's functionality and user experience.

  
